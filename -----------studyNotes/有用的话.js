/**
 *  LeetCode的题大致分成两类：
 *  基础算法的知识：
 * 
 *   这些题里面有大量的算法题，解这些题都是有套路的，
 *          不是用递归（深度优先DFS，广度优先BFS），
 *          就是要用动态规划（Dynamic Programming），
 *          或是拆半查找（Binary Search），
 *          或是回溯（Back tracing），
 *          或是分治法（Divide and Conquer），
 *          还有大量的对树，数组、链表、字符串和hash表的操作
 *          通过做这些题能让你对这些最基础的算法的思路有非常扎实的了解和训练。
 *   对我而言，Dynamic Programming 是我的短板，
 *          尤其是一些比较复杂的问题，在推导递推公式上总是有思维的缺陷（数学是我的硬伤），
 *          通过做了这些题后，我能感到我在DP的思路上有了很大的收获
 * 
 *  编程题
 *         比如：atoi，strstr，add two num，括号匹配，字符串乘法，通配符匹配，
 *              文件路径简化，Text Justification，反转单词等等，
 *          这些题的Edge Case,Corner Case有很多。这些题需要你想清楚了再干
 *          只要你稍有疏忽，就会有几个case让你痛不欲生，而且一不小心就会让你的代码会写得又臭又长，无法阅读。
 *          通过做这些题，可以非常好的训练你对各种情况的考虑，
 *          以及你对程序代码组织的掌控（其实就是其中的状态变量）。
 *          还记得我在《函数式编程》中说的，[程序中的状态]是你程序变得复杂难维护的直接原因。
 */