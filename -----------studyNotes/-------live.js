/**
 * @desc  
 *  1.如何高效地刷算法题，坚持不看答案要很久，效率低
 *    可是看过答案之后又记不住。遇到变种接着卡壳。
 *    如此反复好受打击
 * 
 *  ===》 举一反三
 * 
 *   如何快速攻克算法和数据结构  
 *      为什么面试官喜欢考基本算法
 *          1.三年以内的
 *          2.底子是否扎实、即使该知识点用不上
 *          3.是否够聪明。能否在短时间内，提供解决办法
 *          4.避免产生时间复杂度上的尝试性灾难  
 *          
 *          LIU 中间件？
 *      如何高效系统地学习算法和数据结构
 *          先系统后高效
 *          系统？
 *              全面(均有涉猎但是不必深究)
 *              应用(自己动手编写)
 *              思考(加深理解 举一反三)
 *                  比如题目的包装，本质：求最短路、最大流 《===依赖于深入理解算法
 *          如何高效地系统？
 *              全面(找一份学习大纲)
 *              应用(题库)
 *              思考(若干道同类型的boss题 独立完成)
 *              再思考(算法导论)
 *          如何思考：
 *              动态规划、背包
 *              ===》按tag刷题
 *          如何再思考
 *              算法导论                
 * 
 *      动态规划为什么大家普遍觉得难以理解
 *      学习传统算法对日后工作地帮助  
 *          基础扎实 coding速度和质量都有保证
 *              中间件开发   快速胜任造轮子的岗位
 *              极大降低加班时间    
 *          解决问题能力强 较高计算机思维 
 *              擅长实验树、图等非线性数据结构将问题抽象化
 *              擅长计算时空复杂度
 *      学习传统算法对机器学习的帮助
 *      面经分享
 *          leetcode 做到中等到难，才是算法入门 额
 *          数据结构怎么学？
 *              相关题目《====检验写出的数据结构是否正确
 *          刷完题后，看完答案，手动实现。
 *                  再针对同等类型的题目进行算法实践
 * 
 *          徒手写代码？
 *              1.编程语言的熟练程度
 *              2.是否能第一时间想到我埋下的坑？
 *                  2.1 边界情况 
 *              锻炼白板能力：
 *                  1.编程
 *                  2.专项==》 纸和笔 写代码。 leetcode直接提交
 *          如果不是死磕ACM成绩的话，建议注重数据结构
 *              如字符串相关的字典树、哈希、自动机、后缀树
 *          
 *          什么叫举一反三：
 *              当看完快速排序之后，可以给出一个复杂度为O(n)的求中位数算法
 *              这也是即使学了算法到真正应用的关键
 *          好像所有人都在推荐书籍？
 *              给我两个题库+一个搜索引擎，可以学完基础算法和数据结构
 *              并且掌握的比看书扎实得多
 *              
 *              学算法非常需要实践，有非常多的细节无法看书掌握。
 *              
 */


 /**
  * https://www.zhihu.com/question/23148377/answer/36824071?utm_source=com.tencent.tim&utm_medium=social
    @desc 初级大纲

1.基本算法
    枚举
    贪心
    递归和分治
    递堆
    构造
    模拟
3.数据结构
    串
    排序
        快排
        归并==》与逆序数有关
        堆排
    简单并查集
    哈希表和二分查找等高效查找法
        数的HASH
        串的HASH
    哈夫曼树
    堆
————————————————————————————————
2.图算法
    图的深度、广度优先遍历
    最短路径算法
    最小生成树算法
    拓扑排序
    二分法的最大匹配(匈牙利算法)
    最大流的增广路算法(KM算法)
4.简单搜索
    深度优先搜索
    广度优先搜索
    简单搜索技巧和剪枝
5.动态规划
    背包
    类DP
        最长公共子序列
        最优二分检索树
6.数学
    组合数学：
        加法、乘法
        排列组合
        递堆关系
    数论
        素数与整除
        进制位
        同余模运算
    计算方法
        二分法求解单调函数相关知识
7.计算几何学
    几何公式
    叉积和点积应用(如线段相交的判定、点到线的距离)
    多边形的简单算法(求面积)和相关判定(点在多边形内、多边形的相交)
    凸包
  */

/**
 * @desc 中级

 1.基本算法
    c++标准模板库的应用
    较为复杂的模拟题的训练
2.图算法   

 * 
 */