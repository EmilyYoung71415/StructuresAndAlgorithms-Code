/**
 *  @desc 笔记摘自 《半小时入门正则表达式》
 *          http://deerchao.net/tutorials/regex/regex.htm 
 *        前言这是"学习api"的过程，真正熟练掌握还是需要多练习，多使用，才能熟练掌握正则表达式
 *          
 *         什么是？正则表达式就是记录文本规则的代码
 *              它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了
 * 
 *         定义正则
 *              var re = new RegExp("xxxxxxx");  //RegExp对象。参数就是我们想要制定的规则
 *              var re = /xxxxxx/ //简写方法 推荐使用 性能更好 
 *          
 *          小栗子
 *              let str = '374829aaa348791';
                let rule = /\D/;
                if(rule.test(str)){
                    console.log('不全是数字')
                }else{
                    console.log('全是数字')
                }
 *              陌生的：.test() /\D/
 *                  .test() 
 *                      是正则常用方法
 *                      :在字符串中查找符合正则的内容，若查找到返回true,反之返回false.
 *                  \D:
 *                      正则里的符号，不同符号不同含义，用来让我们去定义不同的规则
 * 
 *          \bhi\b  在字符串中精确查找hi。
 *              ==》 \b 是正则表达式规定的一个特殊代码,【元字符】的一种
 *                      而这里的\b 代表单词的开头或结尾
 *          \bhi\b.*\bLucy\b    
 *              ===》 先是一个单词 hi,然后是任意个任意字符(但不能是换行)，最后是 Lucy 这个单词
 *                    . 另一个元字符，匹配除了换行符以外的任意字符
 *                    * 数量,指定前边的内容可以连续重复使用任意次以使整个表达式得到匹配
 *                    .* ==> 任意数量的不包含换行的字符
 *          电话号码0\d\d-\d\d\d\d\d\d\d\d
 *              ===》 以 0 开头 2个数字 -连字符 8个数字
 *              ===》 表达式代替 0\d{2}-\d{8} \d{2}表示必须联系重复匹配\d 2次
 */

 