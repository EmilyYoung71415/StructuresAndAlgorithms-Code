/**
 * 6、4
 * 概览：
 *      二叉树先序、中序，后序遍历的非递归实现
 *      Morris遍历
 *      前缀树
 *      搜索二叉树    
 *      具有平衡性的树--AVL树
 *      红黑树
 *      SB树
 *      Huffman哈夫曼树
 *      234树
 * @func 树的认识
 *  二叉树：
 *      树的每个节点最多只能有两个子节点
 *  二叉搜索树
 *      一个节点与其下的直接左右子节点的大小排序：
 *          左子节点< 节点 < 右节点
 * 
 *  树的方法：
 *      (遍历)
 *      查找
 *      插入
 *      删除
 *      
 *  // 用数组表示树
 * 
 * @desc  树的遍历
 *  中序、         前序、         后序
 * 左、根、右    根、左、右     左、右、根      
 * 
 * 倘若对搜索树进行中序遍历，即是输出其排序顺序，从最小到最大
 * 
 * @desc 数组表示树 /[一般是链表式表示   
 *  下标0 表示根节点、     
 *  节点索引index,节点左子节点：2*index+1; 节点右子节点2*index+2
 *                父节点：(index-1)/2
 *  缺点： 
 *      浪费存储空间：不满的节点和删除掉的节点都会在数组中留下
 *      移动费时：删除节点移动子树时：每个节点都要移动到新位置
 *  好处：[不考虑删除操作]
 *      更简单些
 */